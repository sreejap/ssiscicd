# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(TeamProject)-$(Date:yyyyMMdd)$(Rev:-r)

variables:
    azureSubscriptionEndpoint: Teach For America
    azureResourceGroup: SED-RG
    kubernetesCluster: ssiscicdAKS

trigger:
- master

pool: default

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true
  path: source
- task: PowerShell@1
  displayName: Build SSIS ispac file
  inputs:
    scriptType: inlineScript
    inlineScript: '& "C:\Program Files (x86)\Microsoft Visual Studio\2017\SQL\Common7\IDE\devenv.com" $(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\SLN_AdventureWorksExample.sln /Build Development /project $(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\AdventureWorksExample\AdventureWorksExample.dtproj /out log.txt'
- task: PublishBuildArtifacts@1
  displayName: Publish SSIS ispac file to Pipeline Build Artifacts
  inputs:
    PathtoPublish: '$(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\AdventureWorksExample\bin\Development'
    ArtifactName: 'AdventureWorksExample.ispac'
    publishLocation: 'Container'
# Azure Key Vault
# Download Azure Key Vault secrets
- task: AzureKeyVault@1
  inputs:
    azureSubscription: 'Teach For America'
    KeyVaultName: 'ssiscicdAKV'
    SecretsFilter: '*'
# Technically we need a pom.xml file to use maven. But that seems like a lot, considering we aren't using maven to build the project (because it can't).
# So instead, we use a simple, generic pom.xml file from https://maven.apache.org/guides/introduction/introduction-to-the-pom.html and update the values on the command line.
- task: PowerShell@1
  displayName: Publish SSIS ispac file to ssiscicd Artifact feed
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      $settingsPath = "settings.xml"; 
      Set-Content -Path $settingsPath -Value $env:MAVEN_CRED;
      $minimalPomPath = "pom.xml"; 
      Set-Content -Path $minimalPomPath -Value @"
      <project>
      <modelVersion>4.0.0</modelVersion>
      <groupId>com.mycompany.app</groupId>
      <artifactId>my-app</artifactId>
      <version>1</version>
      </project>
      "@;
      & "C:\Program Files\apache-maven-3.6.2\bin\mvn.cmd" -s settings.xml -Durl=https://pkgs.dev.azure.com/elizabethbaron/ssiscicd/_packaging/ssiscicd/maven/v1 -DgroupId="org.teachforamerica.ssiscicd.demo" -DartifactId=AdventureWorksExample -Dversion="1.0.$(Build.BuildId)" -Dfile=$(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\AdventureWorksExample\bin\Development\AdventureWorksExample.ispac -Dpackaging=ispac -DrepositoryId=dev-azure-com-elizabethbaron-ssiscicd deploy:deploy-file -e
  env:
    MAVEN_CRED: $(mvncred)
- task: Kubernetes@1
  displayName: kubectl create namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'create'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl setup secret to container registry in namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'create'
    arguments: 'secret docker-registry regcred --docker-server=$(docker-server) --docker-username=$(docker-username) --docker-password=$(docker-password) --docker-email=$(docker-email)'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl apply deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'apply'
    useConfigurationFile: true
    configuration: aks\mssqlssis.deployment.yaml
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl get pods in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'get'
    arguments: 'pods -o jsonpath-file=pod.txt'
    outputFormat: 'jsonpath="{.items[0].metadata.name}"'
- task: PowerShell@1
  displayName: Create podName variable
  inputs:
    scriptType: 'inlineScript'
    inlineScript: |
      Get-Content -Path .\pod.txt;
      Write-Host "##vso[task.setvariable variable=podName;]Get-Content -Path .\pod.txt"
- task: Kubernetes@1
  displayName: kubectl download and install ssis package in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'exec'
    arguments: '$(podName) -- powershell.exe -File deploy_ssis_package.ps1 https://pkgs.dev.azure.com/elizabethbaron/ssiscicd/_packaging/ssiscicd/maven/v1/org/teachforamerica/ssiscicd/demo/AdventureWorksExample/1.0.$(Build.BuildNumber)/AdventureWorksExample-1.0.$(Build.BuildNumber).ispac AdventureWorksExample\AdventureWorksExample.dtproj AdventureWorksExample'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl create the service for the deployment in pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    namespace: 'pipeline-$(Build.BuildNumber)'
    command: 'expose'
    arguments: 'deployment mssqlssis-deployment --type=LoadBalancer --name=mssqlssis-service --port=21433 --target-port=1433'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl delete namespace pipeline-$(Build.BuildNumber)
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'delete'
    arguments: namespace pipeline-$(Build.BuildNumber)
    outputFormat: 'yaml'
