# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:-r)

variables:
    azureSubscriptionEndpoint: Teach For America
    azureResourceGroup: SED-RG
    kubernetesCluster: ssiscicdAKS
    namespace: $(Date:yyyyMMdd)$(Rev:-r)

trigger:
- master

pool: default

steps:
- checkout: self  # self represents the repo where the initial Pipelines YAML file was found
  clean: true
  path: source
- task: PowerShell@1
  displayName: build reports
  inputs:
    scriptType: inlineScript
    inlineScript: '& "C:\Program Files (x86)\Microsoft Visual Studio\2017\SQL\Common7\IDE\devenv.com" $(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\SLN_AdventureWorksExample.sln /Build Development /project $(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\AdventureWorksExample\AdventureWorksExample.dtproj /out log.txt'
- publish: $(Agent.BuildDirectory)\source\SLN_AdventureWorksExample\AdventureWorksExample\bin\Development
  artifact: AdventureWorksExample.ispac
- task: Kubernetes@1
  displayName: kubectl get namespaces
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'get'
    arguments: 'namespaces'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl create namespace for build
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'create'
    arguments: namespace pipeline-$(namespace)
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl get namespaces
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'get'
    arguments: 'namespaces'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'
- task: Kubernetes@1
  displayName: kubectl delete namespace
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Teach For America'
    azureResourceGroup: '$(azureResourceGroup)'
    kubernetesCluster: '$(kubernetesCluster)'
    command: 'delete'
    arguments: namespace pipeline-$(namespace)
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
    outputFormat: 'yaml'
